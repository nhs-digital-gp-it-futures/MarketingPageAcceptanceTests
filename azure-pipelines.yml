trigger:
- master

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: dotnetVersion
    value: '5.0.x'
  - name: MSBUILDSINGLELOADCONTEXT
    value: '1'
  - name: BROWSER
    value: chrome
  - name: DB__SERVERURL
    value: $(SERVERURL)
  - name: DB__DATABASENAME
    value: bc-development-bapi
  - name: AZUREBLOBSTORAGE__CONTAINERNAME
    value: buyingcatalogue-development-helm-documents
  - group: dev-secrets

steps:
- task: UseGitVersion@5
  name: gitversion
  displayName: Work out version
  inputs:
    versionSpec: '5.x'

- task: UseDotNet@2
  displayName: 'Use DotNet $(dotnetVersion)'
  inputs:
    version: $(dotnetVersion)
    includePreviewVersions: false

- bash: |
    echo "##vso[task.setvariable variable=PBHOSTURL]$(echo "${PBURL##*://}")"  
  displayName: Set up Host URL

- task: AzureCLI@2
  name: checkURL
  displayName: Check URL is reachable
  inputs:
    azureSubscription: 'NHSAPP-BuyingCatalogue (Non-Prod)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
        appgwPip=$(az network public-ip show --name gpitfutures-development-pip --resource-group gpitfutures-development-rg-appgw --query ipAddress -o tsv)
        echo "DEBUG: $appgwPip    $PBHOSTURL"
        echo "$appgwPip    $PBHOSTURL" | sudo tee -a /etc/hosts
        curl -k -i $(PBURL) --fail --connect-timeout 30

- bash: |
    ./selenium-grid-setup.sh
    if [ $? -ne 0 ]; then exit 1; fi
  displayName: Selenium Grid Setup

- task: DotNetCoreCLI@2
  displayName: 'Run dotnet restore'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run dotnet build'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: "--no-restore"

- task: DotNetCoreCLI@2
  displayName: 'Run All Acceptance Tests'
  inputs:
    command: test
    projects: '**/*.csproj'
    arguments: '-v n --no-build'
  env:
    DB__PASSWORD: $(gpitfuturesdevdbpassword)
  
- task: Docker@2
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: Build and push docker image
  inputs:
    containerRegistry: 'gpitfuturesdevacr'
    repository: 'nhsd/buying-catalogue/mp-ac-tests'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: "$(GitVersion.SemVer)"
    addPipelineData: false

- task: HelmInstaller@1
  displayName: 'Install helm'
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    helmVersionToInstall: 'latest'

- bash: |
    cd charts
    helm package \
        --version $(GitVersion.SemVer) \
        --app-version $(GitVersion.SemVer) \
        mp-ac-tests
  failOnStderr: true
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  name: helmPackage
  displayName: 'Helm package'

- bash: |
    cd charts
    chartPackage=$(ls mp-ac-tests-*.tgz)
    az acr helm push --force \
        -n "gpitfuturesdevacr" \
        -u "gpitfuturesdevacr" \
        -p $(gpitfuturesdevacr-pass) \
        $chartPackage
  failOnStderr: false
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  name: helmPush
  displayName: 'Push helm chart to acr'
